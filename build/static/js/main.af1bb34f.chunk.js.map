{"version":3,"sources":["api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/InputAnswer.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["quizQuestions","question","answer","location","text","Question","props","react_default","a","createElement","className","content","QuestionCount","counter","InputAnswer","onChange","ontextChange","onClick","handleSubmit","Quiz","react_transition_group","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","key","questionId","components_QuestionCount","total","questionTotal","components_Question","components_InputAnswer","Result","quizResult","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","userAnswer","answersCount","result","bind","assertThisInitialized","setState","event","navigator","geolocation","getCurrentPosition","success","error","console","code","message","pos","_this$state$answer","log","lat1","lon1","lat2","lon2","radlat1","Math","PI","radlat2","theta","radtheta","dist","sin","cos","acos","distance","position","_this2","_position$coords","coords","latitude","longitude","check","length","setTimeout","setNextQuestion","confirmAlert","buttons","label","answersCountKeys","keys","answersCountValues","map","maxAnswerCount","max","apply","filter","e","target","value","components_Quiz","components_Result","renderResult","renderQuiz","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af1bb34f.chunk.js","sourcesContent":["var quizQuestions = [\n  {\n    question: \"What franchise would you rather play a game from?\",\n    answer: {\n      location: [25.0252026, 221.5331177],\n      text: \"123\",\n    },\n  },\n  {\n    question: \"恭喜你\",\n  },\n];\n\nexport default quizQuestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Question(props) {\n  return <h2 className=\"question\">{props.content}</h2>;\n}\n\nQuestion.propTypes = {\n  content: PropTypes.string.isRequired\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction QuestionCount(props) {\n  return (\n    <div className=\"questionCount\">\n      記憶斷層 <span>{props.counter}</span>\n    </div>\n  );\n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction InputAnswer(props) {\n  return !props.answer ? (\n    <div />\n  ) : (\n    <div>\n      <textarea onChange={props.ontextChange} />\n      <button onClick={props.handleSubmit}>Submit</button>\n    </div>\n  );\n}\n\nInputAnswer.propTypes = {\n  //   answerType: PropTypes.string.isRequired,\n  //   answerContent: PropTypes.string.isRequired,\n  //   answer: PropTypes.string.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  ontextChange: PropTypes.func.isRequired,\n};\n\nexport default InputAnswer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransitionGroup } from \"react-transition-group\";\nimport Question from \"../components/Question\";\nimport QuestionCount from \"../components/QuestionCount\";\nimport InputAnswer from \"../components/InputAnswer\";\n\nfunction Quiz(props) {\n  return (\n    <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div key={props.questionId}>\n        <QuestionCount counter={props.questionId} total={props.questionTotal} />\n        <Question content={props.question} />\n        <InputAnswer\n          answer={props.answer}\n          handleSubmit={props.handleSubmit}\n          ontextChange={props.ontextChange}\n        />\n      </div>\n    </CSSTransitionGroup>\n  );\n}\n\nQuiz.propTypes = {\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  ontextChange: PropTypes.func.isRequired,\n};\n\nexport default Quiz;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nfunction Result(props) {\n  return (\n    <CSSTransitionGroup\n      className=\"container result\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div>\n        You prefer <strong>{props.quizResult}</strong>!\n      </div>\n    </CSSTransitionGroup>\n  );\n}\n\nResult.propTypes = {\n  quizResult: PropTypes.string.isRequired\n};\n\nexport default Result;\n","import React, { Component } from \"react\";\nimport quizQuestions from \"./api/quizQuestions\";\nimport Quiz from \"./components/Quiz\";\nimport Result from \"./components/Result\";\nimport \"./App.css\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\n\nconst acceptRange = 50;\n\nfunction distance(lat1, lon1, lat2, lon2) {\n  if (lat1 == lat2 && lon1 == lon2) {\n    return 0;\n  } else {\n    var radlat1 = (Math.PI * lat1) / 180;\n    var radlat2 = (Math.PI * lat2) / 180;\n    var theta = lon1 - lon2;\n    var radtheta = (Math.PI * theta) / 180;\n    var dist =\n      Math.sin(radlat1) * Math.sin(radlat2) +\n      Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n    if (dist > 1) {\n      dist = 1;\n    }\n    dist = Math.acos(dist);\n    dist = (dist * 180) / Math.PI;\n    dist = dist * 60 * 1.1515;\n    return dist;\n  }\n}\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      counter: 0,\n      questionId: 1,\n      question: \"\",\n      userAnswer: \"\",\n      answersCount: {},\n      result: \"\",\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.ontextChange = this.ontextChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      question: quizQuestions[0].question,\n      answer: quizQuestions[0].answer,\n    });\n  }\n\n  handleSubmit(event) {\n    navigator.geolocation.getCurrentPosition(this.success.bind(this), function(\n      error\n    ) {\n      console.error(\"Error Code = \" + error.code + \" - \" + error.message);\n    });\n  }\n\n  check(pos, userAnswer) {\n    const { location, text } = this.state.answer;\n    console.log(pos, userAnswer);\n    console.log(location, text);\n    if (\n      location &&\n      distance(pos[0], pos[1], location[0], location[1]) > acceptRange\n    ) {\n      return false;\n    }\n    if (text && userAnswer !== text) {\n      return false;\n    }\n    return true;\n  }\n\n  success(position) {\n    const { latitude, longitude } = position.coords;\n    if (this.check([latitude, longitude], this.state.userAnswer)) {\n      if (this.state.questionId < quizQuestions.length) {\n        setTimeout(() => this.setNextQuestion(), 300);\n      }\n    } else {\n      confirmAlert({\n        message: \"hmm...再想想看\",\n        buttons: [\n          {\n            label: \"Yes\",\n          },\n        ],\n      });\n    }\n  }\n\n  setNextQuestion() {\n    const counter = this.state.counter + 1;\n    const questionId = this.state.questionId + 1;\n\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answer: quizQuestions[counter].answer,\n      userAnswer: \"\",\n    });\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map((key) => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n    return answersCountKeys.filter(\n      (key) => answersCount[key] === maxAnswerCount\n    );\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: \"Undetermined\" });\n    }\n  }\n\n  ontextChange(e) {\n    this.setState({ answer: e.target.value });\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        handleSubmit={this.handleSubmit}\n        ontextChange={this.ontextChange}\n      />\n    );\n  }\n\n  renderResult() {\n    return <Result quizResult={this.state.result} />;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}