{"version":3,"sources":["api/quizQuestions.js","components/Question.js","components/QuestionCount.js","components/InputAnswer.js","components/Quiz.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["quizQuestions","question","answer","text","location","Question","props","react_default","a","createElement","className","content","QuestionCount","counter","InputAnswer","class","onChange","ontextChange","defaultValue","onClick","handleSubmit","Quiz","react_transition_group","component","transitionName","transitionEnterTimeout","transitionLeaveTimeout","transitionAppear","transitionAppearTimeout","key","questionId","components_QuestionCount","total","questionTotal","components_Question","components_InputAnswer","Result","quizResult","distance","lat1","lon1","lat2","lon2","dLat","toRad","dLon","Math","sin","cos","atan2","sqrt","Value","PI","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","qId","localStorage","getItem","parseInt","state","userAnswer","answersCount","result","bind","assertThisInitialized","setState","id","event","navigator","geolocation","getCurrentPosition","success","error","console","code","message","pos","_this$state$answer","log","qid","position","_this2","_position$coords","coords","latitude","longitude","check","length","setTimeout","setNextQuestion","confirmAlert","buttons","label","curId","setItem","answersCountKeys","keys","answersCountValues","map","maxAnswerCount","max","apply","filter","e","target","value","components_Quiz","components_Result","renderResult","renderQuiz","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e888606.chunk.js","sourcesContent":["var quizQuestions = [\n  {\n    question:\n      '這裡彷彿是參與過文學頂峰會的人才適合來的地方。然而有一處文學被阻撓著發展，時間也停滯了。(請找出停滯的時間-時與分，格式為xx:oo)',\n    answer: {\n      text: '11:25',\n    },\n  },\n  {\n    question: '在廣場中的某個空白處浮現出了文字，悲傷就是ＯＯ',\n    answer: {\n      text: '綻放',\n    },\n  },\n  {\n    question:\n      '這裡販賣各式各樣的東西。如果將我們的名字共同處都取出來，將會是這地方的第一個字。(請到此處)',\n    answer: {\n      location: [22.9917937, 120.2018795],\n    },\n  },\n  {\n    question:\n      '在這棟樓有一處彷彿是隔開虛與實的世界，從此門望出去可以看到六個字。',\n    answer: {\n      text: '中正商業大樓',\n    },\n  },\n  {\n    question:\n      '挖，好可愛的蝸牛，得拍下來告訴y...想不起來...是誰呀...。咦？話說我知道這是哪條巷但是這是幾號呢？(請從line要圖)',\n    answer: {\n      text: '29',\n    },\n  },\n  {\n    question:\n      '好奇怪，附近有一家人在吃桌菜，但桌上卻放了一整顆水果。請問水果是？ (就在蝸牛這區，不需過馬路)',\n    answer: {\n      text: '鳳梨',\n    },\n  },\n  {\n    question:\n      '日月人人一冊尚土。請找出組成三個字的地點。(不需到地點，直接輸入)',\n    answer: {\n      text: '明倫堂',\n    },\n  },\n  {\n    question:\n      '明倫堂匾額下的字中似乎隱藏著什麼資訊，請找出這幾個句子，你將會看出下一個地點。(需走到該地點)',\n    answer: {\n      location: [22.9968659, 120.2006528],\n    },\n  },\n  {\n    question: '🟦☀️🏞。請找出代表這個地點的英文縮寫(三個字母)',\n    answer: {\n      text: 'BCP',\n    },\n  },\n  {\n    question: '奇怪，巧克力拼錯了吧，請寫出拼錯的字母 (大小寫須對)',\n    answer: {\n      text: 'R',\n    },\n  },\n  {\n    question:\n      '買了一杯台南最讚的西西里咖啡一路向北，看到有個人在柱子邊尿尿嚇死，定睛一看原來我看錯了啊......柱子另一側寫了一段話，但是記不太清楚了......輕輕ＯＯ，好好說話 (請找出空格兩字)',\n    answer: {\n      text: '碰頭',\n    },\n  },\n  {\n    question: '這個地方有跟擺度人聯名的酒，而我是否該喝下那杯酒呢？(請到此地)',\n    answer: {\n      location: [22.990094, 120.1937285],\n    },\n  },\n  {\n    question:\n      '喝完這杯好像看到回到現實的路了，但前方路的磁磚的規律有點奇怪，或許解開答案出口就會出現了。(請從line要圖，大寫英文)',\n    answer: {\n      text: 'INRUDY',\n    },\n  },\n  {\n    question:\n      'Inrudy, 好熟悉的名字...啊，是我一生的摯愛呀。一切的想起來了......(恭喜破關！！)',\n  },\n];\n\nexport default quizQuestions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Question(props) {\n  return <h4 className=\"question\">{props.content}</h4>;\n}\n\nQuestion.propTypes = {\n  content: PropTypes.string.isRequired,\n};\n\nexport default Question;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction QuestionCount(props) {\n  return (\n    <div className=\"questionCount\">\n      記憶斷層 <span>{props.counter}</span>\n    </div>\n  );\n}\n\nQuestionCount.propTypes = {\n  counter: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired\n};\n\nexport default QuestionCount;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./style.css\";\n\nfunction InputAnswer(props) {\n  return !props.answer ? (\n    <div />\n  ) : (\n    <div class=\"centered\">\n      <textarea\n        onChange={props.ontextChange}\n        defaultValue={props.answer.text ? \"\" : \"此題不用答案\"}\n      />\n      <button onClick={props.handleSubmit}>Submit</button>\n    </div>\n  );\n}\n\nInputAnswer.propTypes = {\n  //   answerType: PropTypes.string.isRequired,\n  //   answerContent: PropTypes.string.isRequired,\n  //   answer: PropTypes.string.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  ontextChange: PropTypes.func.isRequired,\n};\n\nexport default InputAnswer;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransitionGroup } from \"react-transition-group\";\nimport Question from \"../components/Question\";\nimport QuestionCount from \"../components/QuestionCount\";\nimport InputAnswer from \"../components/InputAnswer\";\n\nfunction Quiz(props) {\n  return (\n    <CSSTransitionGroup\n      className=\"container\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div key={props.questionId}>\n        <QuestionCount counter={props.questionId} total={props.questionTotal} />\n        <Question content={props.question} />\n        <InputAnswer\n          answer={props.answer}\n          handleSubmit={props.handleSubmit}\n          ontextChange={props.ontextChange}\n        />\n      </div>\n    </CSSTransitionGroup>\n  );\n}\n\nQuiz.propTypes = {\n  question: PropTypes.string.isRequired,\n  questionId: PropTypes.number.isRequired,\n  questionTotal: PropTypes.number.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  ontextChange: PropTypes.func.isRequired,\n};\n\nexport default Quiz;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nfunction Result(props) {\n  return (\n    <CSSTransitionGroup\n      className=\"container result\"\n      component=\"div\"\n      transitionName=\"fade\"\n      transitionEnterTimeout={800}\n      transitionLeaveTimeout={500}\n      transitionAppear\n      transitionAppearTimeout={500}\n    >\n      <div>\n        You prefer <strong>{props.quizResult}</strong>!\n      </div>\n    </CSSTransitionGroup>\n  );\n}\n\nResult.propTypes = {\n  quizResult: PropTypes.string.isRequired\n};\n\nexport default Result;\n","import React, { Component } from \"react\";\nimport quizQuestions from \"./api/quizQuestions\";\nimport Quiz from \"./components/Quiz\";\nimport Result from \"./components/Result\";\nimport \"./App.css\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\n\nconst acceptRange = 50;\nconst byPassSecret = \"autumn31 is smart\";\n\nfunction distance(lat1, lon1, lat2, lon2) {\n  var R = 6371; // km\n  var dLat = toRad(lat2 - lat1);\n  var dLon = toRad(lon2 - lon1);\n  var lat1 = toRad(lat1);\n  var lat2 = toRad(lat2);\n\n  var a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n  return d * 1000;\n}\n\nfunction toRad(Value) {\n  return (Value * Math.PI) / 180;\n}\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    var qId = localStorage.getItem(\"questionId\");\n    qId = qId ? parseInt(qId) : 1;\n    this.state = {\n      counter: qId - 1,\n      questionId: qId,\n      question: \"\",\n      userAnswer: \"\",\n      answersCount: {},\n      result: \"\",\n    };\n\n    this.ontextChange = this.ontextChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      question: quizQuestions[this.state.counter].question,\n      answer: quizQuestions[this.state.counter].answer,\n    });\n  }\n\n  handleSubmit(id, event) {\n    navigator.geolocation.getCurrentPosition(\n      this.success.bind(this, id),\n      function (error) {\n        console.error(\"Error Code = \" + error.code + \" - \" + error.message);\n      }\n    );\n  }\n\n  check(pos, userAnswer) {\n    const { location, text } = this.state.answer;\n    console.log(pos, userAnswer);\n    console.log(location, text);\n    if (userAnswer === byPassSecret) {\n      return true;\n    }\n    location && console.log(distance(pos[0], pos[1], location[0], location[1]));\n    if (\n      location &&\n      distance(pos[0], pos[1], location[0], location[1]) > acceptRange\n    ) {\n      return false;\n    }\n    if (text && userAnswer !== text) {\n      return false;\n    }\n    return true;\n  }\n\n  success(qid, position) {\n    const { latitude, longitude } = position.coords;\n    if (this.check([latitude, longitude], this.state.userAnswer)) {\n      if (qid < quizQuestions.length) {\n        setTimeout(() => this.setNextQuestion(qid), 300);\n      }\n    } else {\n      confirmAlert({\n        message: \"hmm...再想想看\",\n        buttons: [\n          {\n            label: \"Yes\",\n          },\n        ],\n      });\n    }\n  }\n\n  setNextQuestion(curId) {\n    const questionId = curId + 1;\n    const counter = curId;\n    localStorage.setItem(\"questionId\", questionId);\n\n    this.setState({\n      counter: counter,\n      questionId: questionId,\n      question: quizQuestions[counter].question,\n      answer: quizQuestions[counter].answer,\n      userAnswer: \"\",\n    });\n  }\n\n  getResults() {\n    const answersCount = this.state.answersCount;\n    const answersCountKeys = Object.keys(answersCount);\n    const answersCountValues = answersCountKeys.map((key) => answersCount[key]);\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\n\n    return answersCountKeys.filter(\n      (key) => answersCount[key] === maxAnswerCount\n    );\n  }\n\n  setResults(result) {\n    if (result.length === 1) {\n      this.setState({ result: result[0] });\n    } else {\n      this.setState({ result: \"Undetermined\" });\n    }\n  }\n\n  ontextChange(e) {\n    this.setState({ userAnswer: e.target.value });\n  }\n\n  renderQuiz() {\n    return (\n      <Quiz\n        answer={this.state.answer}\n        questionId={this.state.questionId}\n        question={this.state.question}\n        questionTotal={quizQuestions.length}\n        handleSubmit={this.handleSubmit.bind(this, this.state.questionId)}\n        ontextChange={this.ontextChange}\n      />\n    );\n  }\n\n  renderResult() {\n    return <Result quizResult={this.state.result} />;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}